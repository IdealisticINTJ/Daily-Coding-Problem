class Solution {
public:

    struct DSU {
        vector<int> e;
        DSU(int N) { e = vector<int>(N, -1); }

        // get representive component (uses path compression)
        int get(int x) { return e[x] < 0 ? x : e[x] = get(e[x]); }

        bool same_set(int a, int b) { return get(a) == get(b); }

        int size(int x) { return -e[get(x)]; }

        bool unite(int x, int y) {  // union by size
            x = get(x), y = get(y);
            if (x == y) return false;
            if (e[x] > e[y]) swap(x, y);
            e[x] += e[y];
            e[y] = x;
            return true;
        }
    };

    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = (int)graph.size(), s=INT32_MAX;
        DSU dsu {n+1};

        unordered_map<int, int> count {};
        for(int i=0; i<n;i++)
            for(int j=0; j<n;j++)
                if(graph[i][j]==1&&i!=j) {dsu.unite(i, j);}   
        for(int i : initial) 
            count[dsu.get(i)]++;
        
        int res=INT32_MAX, max_size=0;

        for(int i : initial) {
            s=min(s, i);
            if(count[dsu.get(i)]==1){
                if(dsu.size(dsu.get(i))>max_size){
                    max_size=dsu.size(dsu.get(i));
                    res=i;
                }else if(dsu.size(dsu.get(i))==max_size){
                    res=min(res, i);
                }
            }
        }
        return res==INT32_MAX?s:res;
    }
};